(1)
int main(void)
{
    int num1 = 128;
    int num2 = 256;

    printf("%d, %d\n, add(num1, num2), substract(num1, num2));
    return 0;
}
어떤함수가 먼저 호출될까?
-> 표준에 따르면, 함수 매개변수의 평가 순서는 명시되어있지 않음
-> printf()가 실제로 실행되기 전에 add()와subtract()이 호출된다는것은 보장
-> 누가 먼저 호출되는지는 컴파일러 마음

(2)
size_t g_boss = 0;
/* 던전을 찾으면 1을 반환, 함수 내부에서 g_boss 변수 셋팅 */
int find_next_dungeon(void);

/* g_boss가 1이면 보스 몹도 같이 소환 */
int spawn_monster(void);

/* 또 다른 함수 내부 */
if(find_next_dugeon() + spawn_monster() == 2)

-> find_next_dugeon()이 먼저 호출된다는 보장이없다
-> 한 줄에 있는 함수 호출 순서에 의존해서 코드를 작성하면 안된다
-> ;은 sequence point중 하나이다

(3)
함수 매개변수의 평가 순서는 컴파일러마다 다를 수 있음
한 함수의 매개변수들이 동일한 변수를 수정할 경우, 결과가 정의됮 ㅣ않음
add(++i, ++i); /* 어떤 일이 일어날지 정의되지않음 */
add(i = -1, i = -1); /* 어떤 일이 일어날지 정의되지않음 */
add(i, i++) /* 어떤 일이 일어날지 정의되지않음 */

(4)
int result = add(num1, num2) + substract(num1, num2) * divide(num1, num2);
-> 연산자 우선순위와 평가 순서는 서로 아무 연관이 없음

(5)
int i, j, k = 0;
if(++i || ++j && ++k)
{
    printf("true!\n");
}
printf("%d, %d, %d\n", i, j, k);
-> true!
-> 1, 0, 0

(2)
잘못된 생각: &&때문에 연산이 먼저 된다고 생각한다
++j, ++k가 연산되는것
연산자 우선순위에서 &&가 ||보다 높기때문에 맞지않나?

(3)
연산자의 우선순위와 평가순서는 서로 상관이 없다

(4)실제동작
if(++i || ++j && ++K)
||와&&는 sequence point이기때문에
연산자의 우선순위와 상관없이 평가를 해야한다

그래서 ++i가 먼저 평가되고
||의 short circuit에 의해 T이므로 뒤에는 더 이상 평가하지 않는다

(5)
if(i++ || ++j && ++k) 
-> i++가 i의 값이 나오고 그 이후 후위 연산을 한다
-> 0이었다가 ++j && ++k로 넘어갈때 i는 1이 된다
-> 왼쪽 피연산자부터 평가를 시작한다